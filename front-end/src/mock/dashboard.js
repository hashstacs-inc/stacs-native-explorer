const txList = {
  "code": "000000",
  "msg": "success",
  "successful": true,
  "data":{
      "list":[{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"1000",
        "executeResult":"1",
        "feeCurrency":'ABC'
      },{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"100000000.12345678",
        "executeResult":"1",
        "feeCurrency":'ABC'
      },{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"1000.12345678",
        "executeResult":"0",
        "feeCurrency":'ABC',
        "errorMessage":"就是失败了"
      }],
      "pageNum": 1,
      "pageSize": 15,
      "total": 1000
    }
}

const txListAn = {
  "code": "000000",
  "msg": "success",
  "successful": true,
  "data":{
      "list":[{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"1000",
        "executeResult":"1",
        "feeCurrency":'ABC'
      },{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"100000000.12345678",
        "executeResult":"1",
        "feeCurrency":'ABC'
      },{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"1000.12345678",
        "executeResult":"0",
        "feeCurrency":'ABC',
        "errorMessage":"就是失败了"
      }],
      "pageNum": 1,
      "pageSize": 20,
      "total": 1000
    }
}

const blockList = {
  "code": "000000",
  "msg": "success",
  "successful": true,
  "data":
    {
      "list":[{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"1000",
        "executeResult":"1",
        "feeCurrency":'ABC',
        'height':"111"
      },{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"100000000.12345678",
        "executeResult":"1",
        "feeCurrency":'ABC'
      },{
        "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
        "txType": "DEFAULT",
        "blockTime": 1575876188985,
        "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
        "bdName":"ywz",
        "bdType":"GG",
        "policyId":"TRANSFER",
        "feeAmount":"1000.12345678",
        "executeResult":"0",
        "feeCurrency":'ABC',
        "errorMessage":"就是失败了"
      }],
      "pageNum": 1,
      "pageSize": 20,
      "total": 1000
    }
}

const blockListDetails = {
  "code": "000000",
  "msg": "success",
  "successful": true,
  "data":{
    "blockHash":"288f7900bf525bd14021bc89b18d6a9b9c44b3ed3fce88b17b5dbbf4f5846a34",
    "height":2904,
    "blockTime":1575631429519,
    "maxHeight":2905,
    "previousHash":"1709cc5ebb3d70c17b6d70bf775b9ed6c1972101ff22e231c6a838f836249117",
  }
}



const contractList = {
  "code": "000000",
  "msg": "success",
  "successful": true,
  "data":{
      "list":[{
        "address": "123",
        "name": "UBUB03",
        "symbol": "UBUB03"
      },
      {
        "address": "456",
        "name": "UBUB02",
        "symbol": "UBUB02"
      },
      {
        "address": "789",
        "name": "UBUB01",
        "symbol": "UBUB01"
      }]
    }
}

const balance = {
  "code": "000000",
  "msg": "success",
  "successful": true,
  "data":['10000']
}

const txDetails = {
  "code": "000000",
  "msg": "success",
  "successful": true,
  "data":{
    "txId": "79930c7e4459007a7268541a309a6f94da972360eac0f3026bc5120d2938768d",
    "bdName":"ywz",
    "bdType":"GG",
    "policyId":"TRANSFER",
    "submitter":"4888db5233813f18437cee95a2cc67d43a5bf06b",
    "maxAllowFee":"1000.12345678",
    "feeAmount":"1000.12345678",
    "feeCurrency":'ABC',
    "blockHeight":"1409",
    "blockTime":1575631429519,
    "executeResult":1,
    "actionDatas":[
      {
        "abi": "[{\"constant\":true,\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"isContract\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"updatePolicyId\",\"inputs\":[{\"name\":\"newPolicyIdStr\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"recovery\",\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"balanceAmount\",\"type\":\"uint256\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"buybackPay\",\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_payValues\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"hexStr2bytes\",\"inputs\":[{\"name\":\"data\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"hexStringToBytes32\",\"inputs\":[{\"name\":\"hexString\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"settlPay\",\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"transferToContract\",\"inputs\":[{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"ownerAddr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"recoverToken\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":true},{\"constant\":false,\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":true},{\"constant\":false,\"name\":\"additionalIssue\",\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"bytesToBytes32\",\"inputs\":[{\"name\":\"bytes_32\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"issuerAddr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"stringToBytes32\",\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"splitBytes\",\"inputs\":[{\"name\":\"strBytes\",\"type\":\"bytes\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"getPolicyId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"name\":\"\",\"inputs\":[{\"name\":\"_ownerAddr\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_policyId\",\"type\":\"string\"}],\"type\":\"constructor\",\"payable\":false},{\"anonymous\":false,\"name\":\"RechangeSuccess\",\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"RollbackTransfer\",\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"Transfer\",\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"Bytes32\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"UintLog\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"Bytes\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"Address\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"String\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"type\":\"event\",\"payable\":false},{\"constant\":true,\"name\":\"isContract\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"updatePolicyId\",\"inputs\":[{\"name\":\"newPolicyIdStr\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"recovery\",\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"hexStr2bytes\",\"inputs\":[{\"name\":\"data\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"hexStringToBytes32\",\"inputs\":[{\"name\":\"hexString\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"bytesToBytes32\",\"inputs\":[{\"name\":\"bytes_32\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"stringToBytes32\",\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"splitBytes\",\"inputs\":[{\"name\":\"strBytes\",\"type\":\"bytes\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"getPolicyId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"balanceAmount\",\"type\":\"uint256\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"buybackPay\",\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_payValues\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"settlPay\",\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"transferToContract\",\"inputs\":[{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"ownerAddr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"recoverToken\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":true},{\"constant\":false,\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":true},{\"constant\":false,\"name\":\"additionalIssue\",\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"issuerAddr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"tokenOwnerAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"offerAddress\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"receiveToken\",\"inputs\":[{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false}]",
        "code": "60806040523480156200001157600080fd5b50604051620031183803806200311883398101806040528101908080519060200190929190805182019291906020018051820192919060200180519060200190929190805190602001909291908051820192919050505085600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460039080519060200190620001029291906200067a565b5083600490805190602001906200011b9291906200067a565b5081600660006101000a81548160ff021916908360ff1602179055508260058190555060055460076000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001c08162000217640100000000026401000000009004565b600081600019169055507ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e60005460405180826000191660001916815260200191505060405180910390a150505050505062000729565b600060608290506040815114151562000298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f68657820537472696e67206c656e677468206d7573742069732036340000000081525060200191505060405180910390fd5b620002cb620002b684620002d3640100000000026401000000009004565b620005f2640100000000026401000000009004565b915050919050565b6060806060600080606060008795506000865111151562000382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f68657820737472696e6720746f206279746573206572726f722c20686578207381526020017f7472696e6720697320656d70747900000000000000000000000000000000000081525060400191505060405180910390fd5b8551604051908082528060200260200182016040528015620003b35781602001602082028038833980820191505090505b509450600093505b8551841015620004dd578584815181101515620003d457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004925060608311156200047857600a606184030185858151811015156200046457fe5b9060200190602002018181525050620004cf565b6042831115620004ac57600a604184030185858151811015156200049857fe5b9060200190602002018181525050620004ce565b603083038585815181101515620004bf57fe5b90602001906020020181815250505b5b8380600101945050620003bb565b60028551811515620004eb57fe5b046040519080825280601f01601f1916602001820160405280156200051f5781602001602082028038833980820191505090505b509150600090505b8451811015620005e45784600182018151811015156200054357fe5b90602001906020020151601086838151811015156200055e57fe5b9060200190602002015102017f010000000000000000000000000000000000000000000000000000000000000002826002838115156200059a57fe5b04815181101515620005a857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060028101905062000527565b819650505050505050919050565b6000602082511415156200066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f696e707574206279746573206c656e677468206d75737420697320333200000081525060200191505060405180910390fd5b60208201519050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006bd57805160ff1916838001178555620006ee565b82800160010185558215620006ee579182015b82811115620006ed578251825591602001919060010190620006d0565b5b509050620006fd919062000701565b5090565b6200072691905b808211156200072257600081600090555060010162000708565b5090565b90565b6129df80620007396000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d57806316279055146101bd57806316fe62a41461021857806318160ddd14610299578063313ce567146102c45780634d9f6116146102f557806370a08231146103ac57806372c260241461040357806379495824146104c45780638b6bb00f146105a65780638c07fdc41461062b57806395d89b41146106ec578063988dcf7c1461077c5780639c675eaa14610831578063a7229fd914610888578063a9059cbb14610900578063b369f42314610958578063bfe370d91461099d578063c27bd4ff14610a22578063cfb5192814610a79578063de3840eb14610afe578063ef7b2be214610bf4575b600080fd5b34801561013957600080fd5b50610142610c27565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610182578082015181840152602081019050610167565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c957600080fd5b506101fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cc9565b604051808215151515815260200191505060405180910390f35b34801561022457600080fd5b5061027f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610cdc565b604051808215151515815260200191505060405180910390f35b3480156102a557600080fd5b506102ae610d12565b6040518082815260200191505060405180910390f35b3480156102d057600080fd5b506102d9610d1c565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030157600080fd5b5061036a600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035600019169060200190929190505050610d33565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b857600080fd5b506103ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e90565b6040518082815260200191505060405180910390f35b34801561040f57600080fd5b506104aa6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610edc565b604051808215151515815260200191505060405180910390f35b3480156104d057600080fd5b5061052b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610fcb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056b578082015181840152602081019050610550565b50505050905090810190601f1680156105985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105b257600080fd5b5061060d600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506112d6565b60405180826000191660001916815260200191505060405180910390f35b34801561063757600080fd5b506106d2600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061136f565b604051808215151515815260200191505060405180910390f35b3480156106f857600080fd5b50610701611467565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610741578082015181840152602081019050610726565b50505050905090810190601f16801561076e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078857600080fd5b506108176004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611509565b604051808215151515815260200191505060405180910390f35b34801561083d57600080fd5b50610846611b58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b82565b604051808215151515815260200191505060405180910390f35b61093e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c26565b604051808215151515815260200191505060405180910390f35b34801561096457600080fd5b5061098360048036038101908080359060200190929190505050611cc9565b604051808215151515815260200191505060405180910390f35b3480156109a957600080fd5b50610a04600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611d6f565b60405180826000191660001916815260200191505060405180910390f35b348015610a2e57600080fd5b50610a37611df6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a8557600080fd5b50610ae0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611e20565b60405180826000191660001916815260200191505060405180910390f35b348015610b0a57600080fd5b50610b79600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050611e4b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bb9578082015181840152602081019050610b9e565b50505050905090810190601f168015610be65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c0057600080fd5b50610c09611fbd565b60405180826000191660001916815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b5050505050905090565b600080823b905060008111915050919050565b600080610ce7611fc6565b1515610cf257600080fd5b610cfb836112d6565b905080600081600019169055506001915050919050565b6000600554905090565b6000600660009054906101000a900460ff16905090565b60008060008060418651141515610db2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7369676e6174757265206c656e677468206e6f74206d6174636800000000000081525060200191505060405180910390fd5b6020860151925060408601519150606086015160001a9050601b8160ff161015610ddd57601b810190505b601b8160ff1614158015610df55750601c8160ff1614155b15610e035760009350610e87565b600185828585604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610e7a573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050809050919050565b60008082518451141515610f58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f61646472206c656e677468206e6f742065712076616c7565206c656e6774680081525060200191505060405180910390fd5b600090505b83518161ffff161015610fc057610fb2610f756120e9565b858361ffff16815181101515610f8757fe5b90602001906020020151858461ffff16815181101515610fa357fe5b90602001906020020151612135565b508080600101915050610f5d565b600191505092915050565b60608060606000806060600087955060008651111515611079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f68657820737472696e6720746f206279746573206572726f722c20686578207381526020017f7472696e6720697320656d70747900000000000000000000000000000000000081525060400191505060405180910390fd5b85516040519080825280602002602001820160405280156110a95781602001602082028038833980820191505090505b509450600093505b85518410156111c95785848151811015156110c857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049250606083111561116957600a6061840301858581518110151561115657fe5b90602001906020020181815250506111bc565b604283111561119a57600a6041840301858581518110151561118757fe5b90602001906020020181815250506111bb565b6030830385858151811015156111ac57fe5b90602001906020020181815250505b5b83806001019450506110b1565b600285518115156111d657fe5b046040519080825280601f01601f1916602001820160405280156112095781602001602082028038833980820191505090505b509150600090505b84518110156112c857846001820181518110151561122b57fe5b906020019060200201516010868381518110151561124557fe5b9060200190602002015102017f0100000000000000000000000000000000000000000000000000000000000000028260028381151561128057fe5b0481518110151561128d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600281019050611211565b819650505050505050919050565b6000606082905060408151141515611356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f68657820537472696e67206c656e677468206d7573742069732036340000000081525060200191505060405180910390fd5b61136761136284610fcb565b611d6f565b915050919050565b6000808251845114151561138257600080fd5b600084511115156113fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f61646472657373206172726179206c656e67746820697320300000000000000081525060200191505060405180910390fd5b600090505b83518161ffff16101561145c5761144e33858361ffff1681518110151561142357fe5b90602001906020020151858461ffff1681518110151561143f57fe5b90602001906020020151612135565b508080600101915050611400565b600191505092915050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ff5780601f106114d4576101008083540402835291602001916114ff565b820191906000526020600020905b8154815290600101906020018083116114e257829003601f168201915b5050505050905090565b60008060007f0c25c0872997c78107328cf7256006d9759fdc985126cb9031ce8d08a8f8bfd9876115393361262d565b604051808381526020018281526020019250505060405180910390a161155e3361262d565b87111515156115fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f7374616e646172642063757272656e63792062616c616e6365206e6f7420656e81526020017f6f7567680000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156116a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f746f206164647265737320696c6c6567616c000000000000000000000000000081525060200191505060405180910390fd5b6116a985610cc9565b1515611743576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f756e737461626c652063757272656e637920636f6e747261637420616464726581526020017f737320646f6573206e6f7420657869737400000000000000000000000000000081525060400191505060405180910390fd5b849150836040518082805190602001908083835b60208310151561177c5780518252602082019150602081019050602083039250611757565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561181157600080fd5b505af1158015611825573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561184f57600080fd5b81019080805164010000000081111561186757600080fd5b8281019050602081018481111561187d57600080fd5b815185600182028301116401000000008211171561189a57600080fd5b50509291905050506040518082805190602001908083835b6020831015156118d757805182526020820191506020810190506020830392506118b2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561197d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f74686520746f6b656e2073796d626f6c206e6f7420657175616c73000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16638f31fcff6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119e157600080fd5b505af11580156119f5573d6000803e3d6000fd5b505050506040513d6020811015611a0b57600080fd5b81019080805190602001909291905050509050611a29338289612135565b92508215611b4b578173ffffffffffffffffffffffffffffffffffffffff1663fed6b65788886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050602060405180830381600087803b158015611aa857600080fd5b505af1158015611abc573d6000803e3d6000fd5b505050506040513d6020811015611ad257600080fd5b810190808051906020019092919050505092503373ffffffffffffffffffffffffffffffffffffffff167fdf492c2f66ac3a5203f58f763da5f40b32ff9a9efcca98cfb67987234a3b102884604051808215151515815260200191505060405180910390a2821515611b4a57611b49338289612676565b5b5b8292505050949350505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000803373ffffffffffffffffffffffffffffffffffffffff1614151515611c12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f6d73672e73656e6465722061646472657373206973203078300000000000000081525060200191505060405180910390fd5b611c1d848484612135565b90509392505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1614151515611cb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f66726f6d2061646472657373206973203078300000000000000000000000000081525060200191505060405180910390fd5b611cc1338484612135565b905092915050565b6000801515611d66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f7374616e646172642063757272656e63792074656d706f726172696c7920646f81526020017f206e6f7420737570706f7274206164646974696f6e616c2069737375616e636581525060400191505060405180910390fd5b60009050919050565b600060208251141515611dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f696e707574206279746573206c656e677468206d75737420697320333200000081525060200191505060405180910390fd5b60208201519050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060829050600081511415611e3d5760006001029150611e45565b602083015191505b50919050565b6060806000808651111515611ec8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f696e707574206279746573206c656e677468206973203000000000000000000081525060200191505060405180910390fd5b836040519080825280601f01601f191660200182016040528015611efb5781602001602082028038833980820191505090505b509150600090505b83811015611fb15785818601815181101515611f1b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028282815181101515611f7457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611f03565b81925050509392505050565b60008054905090565b600080611fde68706f6c6963795f696460010261277a565b90507ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e8160405180826000191660001916815260200191505060405180910390a17ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e60005460405180826000191660001916815260200191505060405180910390a16000546000191681600019161415156120e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f706f6c6963794964206661696c65642076616c69646174696f6e00000000000081525060200191505060405180910390fd5b600191505090565b600080612128694d53475f53454e44455260010260207f5354414353000000000000000000000000000000000000000000000000000001600102612872565b9050806001900491505090565b60008060008473ffffffffffffffffffffffffffffffffffffffff16141515156121c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f746f20616464726573732069732030783000000000000000000000000000000081525060200191505060405180910390fd5b600083111515612265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f7468652076616c7565206d75737420626520746861742069732067726561746581526020017f72207468616e207a65726f2e000000000000000000000000000000000000000081525060400191505060405180910390fd5b82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561231c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f62616c616e6365206e6f7420656e6f756768000000000000000000000000000081525060200191505060405180910390fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515612414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f746f20616464726573732062616c616e6365206f766572666c6f77000000000081525060200191505060405180910390fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905082600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a380600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540114151561262157fe5b60019150509392505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f219c4c04abd296da7f59b5630bb10f151e238e589be6c2429291ad288ec3fee0836040518082815260200191505060405180910390a3505050565b6000807ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e8360405180826000191660001916815260200191505060405180910390a16127eb8360207f53544143530000000000000000000000000000000000000000000000000000016001026128d8565b90506000602060ff16111515612869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f757470757420697320656d707479000000000000000000000000000000000081525060200191505060405180910390fd5b80915050919050565b600061287c612990565b6000612886612990565b8683600060018110151561289657fe5b6020020190600019169081600019168152505084915085816020856000866000f1508060006001811015156128c757fe5b602002015193505050509392505050565b60006128e2612990565b60006128ec612990565b868360006001811015156128fc57fe5b6020020190600019169081600019168152505084915085816020856000866000f1507ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e81600060018110151561294e57fe5b602002015160405180826000191660001916815260200191505060405180910390a180600060018110151561297f57fe5b602002015193505050509392505050565b6020604051908101604052806001906020820280388339808201915050905050905600a165627a7a72305820c675c3d137df622dfc21643ca8041679dcd95f57dd6598653c98427df8ba98a20029000000000000000000000000bc792842aeefe672f85ca676ae4569242a0fde1d00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000007535f343538343300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c535f34353834335f4e616d650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303037343738356636393634",
        "extension": "{\"a\":1}",
        "from": "bc792842aeefe672f85ca676ae4569242a0fde1d",
        "functionName": "CREATE_CONTRACT",
        "index": 0,
        "name": "StandardCurrency",
        "sourCode": "pragma solidity ^0.4.24;\n\n\n//This smart contact is generated for  #name#\ncontract Common {\n    bytes32 constant STACS_ADDR = bytes32(0x5354414353000000000000000000000000000000000000000000000000000001);\n    bytes32 constant  POLICY_ID = bytes32(0x0000000000000000000000000000000000000000000000706f6c6963795f6964);\n    bytes32 constant TX_ID = bytes32(0x00000000000000000000000000000000000000000000000000000074785f6964);\n    bytes32 constant MSG_SENDER = bytes32(0x000000000000000000000000000000000000000000004d53475f53454e444552);\n    event Bytes32(bytes32);\n    event UintLog(uint, uint);\n    event Bytes(bytes);\n    event Address(address);\n    event String(string);\n\n    bytes32 policyId;\n\n    function updatePolicyId(string newPolicyIdStr) public returns (bool success);\n\n    function getPolicyId() public view returns (bytes32){\n        return policyId;\n    }\n\n    function recovery(bytes sig, bytes32 hash) public pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        //Check the signature length\n        require(sig.length == 65, \"signature length not match\");\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // Version of signature should be 27 or 28\n        if (v < 27) {\n            v += 27;\n        }\n        //check version\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n        return ecrecover(hash, v, r, s);\n    }\n\n    function hexStr2bytes(string data) public pure returns (bytes){\n        bytes memory a = bytes(data);\n        require(a.length > 0, \"hex string to bytes error, hex string is empty\");\n        uint[] memory b = new uint[](a.length);\n\n        for (uint i = 0; i < a.length; i++) {\n            uint _a = uint(a[i]);\n\n            if (_a > 96) {\n                b[i] = _a - 97 + 10;\n            }\n            else if (_a > 66) {\n                b[i] = _a - 65 + 10;\n            }\n            else {\n                b[i] = _a - 48;\n            }\n        }\n\n        bytes memory c = new bytes(b.length / 2);\n        for (uint _i = 0; _i < b.length; _i += 2) {\n            c[_i / 2] = byte(b[_i] * 16 + b[_i + 1]);\n        }\n        return c;\n    }\n\n    function getContextIdByKey(bytes32 key) internal returns (bytes32 contextPolicyId){\n        emit Bytes32(key);\n        bytes32 output = getContextParam(key, 32, STACS_ADDR);\n        require(output.length > 0, \"output is empty\");\n        return output;\n    }\n\n    function getContextParam(bytes32 input, uint outputSize, bytes32 precompliedContractAddr) internal returns (bytes32){\n        bytes32[1] memory inputs;\n        inputs[0] = input;\n        bytes32 stacs_addr = precompliedContractAddr;\n        bytes32[1] memory output;\n        assembly{\n            let success := call(//This is the critical change (Pop the top stack value)\n            0, //5k gas\n            stacs_addr, //To addr\n            0, //No value\n            inputs,\n            32,\n            output,\n            outputSize)\n        }\n        emit Bytes32(output[0]);\n        return output[0];\n    }\n\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n\n    function splitBytes(bytes strBytes, uint start, uint length) public pure returns (bytes){\n        require(strBytes.length > 0, \"input bytes length is 0\");\n        bytes memory b = new bytes(length);\n        for (uint i = 0; i < length; i++) {\n            b[i] = strBytes[start + i];\n        }\n        return b;\n    }\n\n    function bytesToAddress(bytes bys) internal pure returns (address addr) {\n        require(bys.length == 20, \"bytes to address error. input bytes length is not 20\");\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    function bytesToBytes32(bytes bytes_32) public pure returns (bytes32 result){\n        require(bytes_32.length == 32, \"input bytes length must is 32\");\n        assembly {\n            result := mload(add(bytes_32, 32))\n        }\n    }\n\n    function hexStringToBytes32(string hexString) public pure returns (bytes32 result){\n        bytes memory hexStringBytes = bytes(hexString);\n        require(hexStringBytes.length == 64, \"hex String length must is 64\");\n        return bytesToBytes32(hexStr2bytes(hexString));\n    }\n\n    function verifyPolicyId() internal returns (bool){\n        bytes32 contextPolicyId = getContextIdByKey(POLICY_ID);\n        emit Bytes32(contextPolicyId);\n        emit Bytes32(policyId);\n        require(contextPolicyId == policyId, \"policyId failed validation\");\n        return true;\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) public view returns (bool is_contract) {\n        uint length;\n        assembly {\n        //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    function getContextParam2(bytes32 input, uint outputSize, bytes32 precompliedContractAddr) internal returns (bytes32){\n        bytes32[1] memory inputs;\n        inputs[0] = input;\n        bytes32 stacs_addr = precompliedContractAddr;\n        bytes32[1] memory output;\n        assembly{\n            let success := call(\n            0,\n            stacs_addr,\n            0,\n            inputs,\n            32,\n            output,\n            outputSize)\n        }\n        return output[0];\n    }\n\n    //get context sender\n    function getContextSender() internal returns (address){\n        //通过使用增强的预编译合约验证，originalAddress是否是最原始交易的sender\n        bytes32 output = getContextParam2(MSG_SENDER, 32, STACS_ADDR);\n        return address(output);\n    }\n}\n\n\n//This smart contact is generated for  #name#\ncontract StandardToken is Common {\n    address issuerAddress;\n    address ownerAddress;\n    string tokenName;\n    string tokenSymbol;\n    uint totalSupplyAmount;\n    uint8 decimalsDigit;\n\n\n    function issuerAddr() public view returns (address){\n        return issuerAddress;\n    }\n\n    function ownerAddr() public view returns (address){\n        return ownerAddress;\n    }\n\n    function name() public view returns (string){\n        return tokenName;\n    }\n\n    function symbol() public view returns (string){\n        return tokenSymbol;\n    }\n\n    function decimals() public view returns (uint8){\n        return decimalsDigit;\n    }\n\n    function totalSupply() public view returns (uint256){\n        return totalSupplyAmount;\n    }\n\n\n\n    function transfer(address _to, uint256 _value) public payable returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) internal returns (bool);\n\n    function recoverToken(address _from, address _to, uint256 _value) public payable returns (bool success);\n\n    function additionalIssue(uint num) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function updatePolicyId(string newPolicyIdStr) public returns (bool success){\n        require(verifyPolicyId());\n        //update policyId\n        bytes32 newPolicyId = hexStringToBytes32(newPolicyIdStr);\n        policyId = newPolicyId;\n        return true;\n    }\n\n    function settlPay(address[] _addrs, uint256[] _values) public returns (bool success){\n        require(_addrs.length == _values.length);\n        require(_addrs.length > 0, \"address array length is 0\");\n\n        for (uint16 i = 0; i < _addrs.length; i++) {\n            transferFrom(msg.sender, _addrs[i], _values[i]);\n        }\n        return true;\n    }\n\n    function buybackPay( address[] _addrs, uint256[] _payValues)public returns (bool success){\n        require(_addrs.length == _payValues.length,\"addr length not eq value length\");\n\n        for (uint16 i = 0; i < _addrs.length; i++) {\n            transferFrom(getContextSender(), _addrs[i], _payValues[i]);\n        }\n        return true;\n    }\n}\n\n\n//This smart contact is generated for  #name#\ninterface TokenReceiver {\n    /// @param _payment stable token payment of subscribe token\n    /// @param _amount The amount of token to be transferred\n    /// @return success whether the contract method invoke is successful\n    function receiveToken(uint256 _payment, uint256 _amount) external returns (bool success);\n\n    ///@return offerAddress the address of contract offer\n    function tokenOwnerAddress() external view returns (address offerAddress);\n\n    function symbol() external view returns (string);\n}\n\n\n//This smart contact is generated for  #name#\ncontract StandardCurrency is StandardToken {\n\n    constructor (\n        address _ownerAddr,\n        string _tokenName,\n        string _tokenSymbol,\n        uint _totalSupply,\n        uint8 _decimals,\n        string _policyId\n    ) public {\n        ownerAddress = _ownerAddr;\n        issuerAddress = msg.sender;\n        tokenName = _tokenName;\n        tokenSymbol = _tokenSymbol;\n        decimalsDigit = _decimals;\n        totalSupplyAmount = _totalSupply;\n        balance[ownerAddress] = totalSupplyAmount;\n        policyId = hexStringToBytes32(_policyId);\n        emit Bytes32(policyId);\n    }\n\n    mapping(address => uint) balance;\n\n    function balanceOf(address _owner) public view returns (uint balanceAmount){\n        balanceAmount = balance[_owner];\n        return (balanceAmount);\n    }\n\n    function getBalance(address _owner) internal view returns (uint){\n        return balance[_owner];\n    }\n\n    function additionalIssue(uint num) public returns (bool){\n        require(false, \"standard currency temporarily do not support additional issuance\");\n        //        require(verifyPolicyId());\n        //        bytes32 txId = getContextIdByKey(TX_ID);\n        //        bytes32 sourceHash = getAdditionalIssueSourceHashInner(txId, msg.sender, num);\n        //        require(verifySpecifiedAddressSig(issuerAddress,sourceHash, signature));\n        //        totalSupplyAmount += num;\n        //        balance[ownerAddress] += num;\n        return false;\n    }\n\n    function transfer(address _to, uint256 _value) public payable returns (bool success){\n        require(msg.sender != 0x0, \"from address is 0x0\");\n        return transferFrom(msg.sender, _to, _value);\n    }\n\n    function recoverToken(address _from, address _to, uint256 _value) public payable returns (bool success){\n        require(msg.sender != 0x0, \"msg.sender address is 0x0\");\n        return transferFrom(_from, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) internal returns (bool){\n        require(_to != 0x0, \"to address is 0x0\");\n        require(_value > 0, \"the value must be that is greater than zero.\");\n        require(balance[_from]  >= _value, \"balance not enough\");\n        require(balance[_to] + _value >= balance[_to], \"to address balance overflow\");\n        uint previousBalance = balance[_from] + balance[_to];\n        balance[_from] -= _value;\n        balance[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balance[_from] + balance[_to] == previousBalance);\n\n        return true;\n    }\n\n    /// @param _to The address of the contract\n    /// @param token use verify sign\n    /// @param _payment cost of stable token to subscribe\n    /// @param _amount The amount of token to be transferred/// @param _amount The amount of token to be transferred\n    /// @return Whether the subscribe is successful or not\n    function transferToContract(uint256 _payment, uint256 _amount,address _to, string token ) public returns (bool success) {\n        emit UintLog(_payment,getBalance(msg.sender));\n        require(_payment <= getBalance(msg.sender), \"standard currency balance not enough\");\n        require(_to != address(0), \"to address illegal\");\n        require(isContract(_to), \"unstable currency contract address does not exist\");\n\n        TokenReceiver tokenReceiver = TokenReceiver(_to);\n        require(keccak256(tokenReceiver.symbol()) == keccak256(token), \"the token symbol not equals\");\n\n        address contractOfferAddress = tokenReceiver.tokenOwnerAddress();\n        success = transferFrom(msg.sender, contractOfferAddress, _payment);\n        if (success) {\n            success = tokenReceiver.receiveToken(_payment, _amount);\n            emit RechangeSuccess(msg.sender, success);\n            if (!success) {\n                rollbackTransfer(msg.sender, contractOfferAddress, _payment);\n            }\n        }\n        return success;\n    }\n\n    // rollback of transfer when failure\n    function rollbackTransfer(address _from, address _to, uint _value) private {\n        balance[_to] -= _value;\n        balance[_from] += _value;\n        emit RollbackTransfer(_to, _from, _value);\n    }\n\n\n    event RechangeSuccess(address indexed _to, bool success);\n    event RollbackTransfer(address indexed _from, address indexed _to, uint256 _value);\n}",
        "symbol": "S_45843",
        "to": "dfd0e74ec823537b412ffe560ed29617706513d3",
        "type": "CONTRACT_CREATION",
        "version": "1.0.0"
      },
      {
        "abi": "[{\"constant\":true,\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"isContract\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"updatePolicyId\",\"inputs\":[{\"name\":\"newPolicyIdStr\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"recovery\",\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"balanceAmount\",\"type\":\"uint256\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"buybackPay\",\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_payValues\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"hexStr2bytes\",\"inputs\":[{\"name\":\"data\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"hexStringToBytes32\",\"inputs\":[{\"name\":\"hexString\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"settlPay\",\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"transferToContract\",\"inputs\":[{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"ownerAddr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"recoverToken\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":true},{\"constant\":false,\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":true},{\"constant\":false,\"name\":\"additionalIssue\",\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"bytesToBytes32\",\"inputs\":[{\"name\":\"bytes_32\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"issuerAddr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"stringToBytes32\",\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"splitBytes\",\"inputs\":[{\"name\":\"strBytes\",\"type\":\"bytes\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"getPolicyId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"name\":\"\",\"inputs\":[{\"name\":\"_ownerAddr\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_policyId\",\"type\":\"string\"}],\"type\":\"constructor\",\"payable\":false},{\"anonymous\":false,\"name\":\"RechangeSuccess\",\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"RollbackTransfer\",\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"Transfer\",\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"Bytes32\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"UintLog\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"Bytes\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"Address\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"type\":\"event\",\"payable\":false},{\"anonymous\":false,\"name\":\"String\",\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"type\":\"event\",\"payable\":false},{\"constant\":true,\"name\":\"isContract\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"updatePolicyId\",\"inputs\":[{\"name\":\"newPolicyIdStr\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"recovery\",\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"hexStr2bytes\",\"inputs\":[{\"name\":\"data\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"hexStringToBytes32\",\"inputs\":[{\"name\":\"hexString\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"bytesToBytes32\",\"inputs\":[{\"name\":\"bytes_32\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"stringToBytes32\",\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"splitBytes\",\"inputs\":[{\"name\":\"strBytes\",\"type\":\"bytes\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"getPolicyId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"balanceAmount\",\"type\":\"uint256\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"buybackPay\",\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_payValues\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"settlPay\",\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"transferToContract\",\"inputs\":[{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"ownerAddr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"recoverToken\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":true},{\"constant\":false,\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":true},{\"constant\":false,\"name\":\"additionalIssue\",\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"issuerAddr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":true,\"name\":\"tokenOwnerAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"offerAddress\",\"type\":\"address\"}],\"type\":\"function\",\"payable\":false},{\"constant\":false,\"name\":\"receiveToken\",\"inputs\":[{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\",\"payable\":false}]",
        "code": "60806040523480156200001157600080fd5b50604051620031183803806200311883398101806040528101908080519060200190929190805182019291906020018051820192919060200180519060200190929190805190602001909291908051820192919050505085600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460039080519060200190620001029291906200067a565b5083600490805190602001906200011b9291906200067a565b5081600660006101000a81548160ff021916908360ff1602179055508260058190555060055460076000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001c08162000217640100000000026401000000009004565b600081600019169055507ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e60005460405180826000191660001916815260200191505060405180910390a150505050505062000729565b600060608290506040815114151562000298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f68657820537472696e67206c656e677468206d7573742069732036340000000081525060200191505060405180910390fd5b620002cb620002b684620002d3640100000000026401000000009004565b620005f2640100000000026401000000009004565b915050919050565b6060806060600080606060008795506000865111151562000382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f68657820737472696e6720746f206279746573206572726f722c20686578207381526020017f7472696e6720697320656d70747900000000000000000000000000000000000081525060400191505060405180910390fd5b8551604051908082528060200260200182016040528015620003b35781602001602082028038833980820191505090505b509450600093505b8551841015620004dd578584815181101515620003d457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004925060608311156200047857600a606184030185858151811015156200046457fe5b9060200190602002018181525050620004cf565b6042831115620004ac57600a604184030185858151811015156200049857fe5b9060200190602002018181525050620004ce565b603083038585815181101515620004bf57fe5b90602001906020020181815250505b5b8380600101945050620003bb565b60028551811515620004eb57fe5b046040519080825280601f01601f1916602001820160405280156200051f5781602001602082028038833980820191505090505b509150600090505b8451811015620005e45784600182018151811015156200054357fe5b90602001906020020151601086838151811015156200055e57fe5b9060200190602002015102017f010000000000000000000000000000000000000000000000000000000000000002826002838115156200059a57fe5b04815181101515620005a857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060028101905062000527565b819650505050505050919050565b6000602082511415156200066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f696e707574206279746573206c656e677468206d75737420697320333200000081525060200191505060405180910390fd5b60208201519050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006bd57805160ff1916838001178555620006ee565b82800160010185558215620006ee579182015b82811115620006ed578251825591602001919060010190620006d0565b5b509050620006fd919062000701565b5090565b6200072691905b808211156200072257600081600090555060010162000708565b5090565b90565b6129df80620007396000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d57806316279055146101bd57806316fe62a41461021857806318160ddd14610299578063313ce567146102c45780634d9f6116146102f557806370a08231146103ac57806372c260241461040357806379495824146104c45780638b6bb00f146105a65780638c07fdc41461062b57806395d89b41146106ec578063988dcf7c1461077c5780639c675eaa14610831578063a7229fd914610888578063a9059cbb14610900578063b369f42314610958578063bfe370d91461099d578063c27bd4ff14610a22578063cfb5192814610a79578063de3840eb14610afe578063ef7b2be214610bf4575b600080fd5b34801561013957600080fd5b50610142610c27565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610182578082015181840152602081019050610167565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c957600080fd5b506101fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cc9565b604051808215151515815260200191505060405180910390f35b34801561022457600080fd5b5061027f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610cdc565b604051808215151515815260200191505060405180910390f35b3480156102a557600080fd5b506102ae610d12565b6040518082815260200191505060405180910390f35b3480156102d057600080fd5b506102d9610d1c565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030157600080fd5b5061036a600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035600019169060200190929190505050610d33565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b857600080fd5b506103ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e90565b6040518082815260200191505060405180910390f35b34801561040f57600080fd5b506104aa6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610edc565b604051808215151515815260200191505060405180910390f35b3480156104d057600080fd5b5061052b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610fcb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056b578082015181840152602081019050610550565b50505050905090810190601f1680156105985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105b257600080fd5b5061060d600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506112d6565b60405180826000191660001916815260200191505060405180910390f35b34801561063757600080fd5b506106d2600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061136f565b604051808215151515815260200191505060405180910390f35b3480156106f857600080fd5b50610701611467565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610741578082015181840152602081019050610726565b50505050905090810190601f16801561076e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078857600080fd5b506108176004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611509565b604051808215151515815260200191505060405180910390f35b34801561083d57600080fd5b50610846611b58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b82565b604051808215151515815260200191505060405180910390f35b61093e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c26565b604051808215151515815260200191505060405180910390f35b34801561096457600080fd5b5061098360048036038101908080359060200190929190505050611cc9565b604051808215151515815260200191505060405180910390f35b3480156109a957600080fd5b50610a04600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611d6f565b60405180826000191660001916815260200191505060405180910390f35b348015610a2e57600080fd5b50610a37611df6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a8557600080fd5b50610ae0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611e20565b60405180826000191660001916815260200191505060405180910390f35b348015610b0a57600080fd5b50610b79600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050611e4b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bb9578082015181840152602081019050610b9e565b50505050905090810190601f168015610be65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c0057600080fd5b50610c09611fbd565b60405180826000191660001916815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b5050505050905090565b600080823b905060008111915050919050565b600080610ce7611fc6565b1515610cf257600080fd5b610cfb836112d6565b905080600081600019169055506001915050919050565b6000600554905090565b6000600660009054906101000a900460ff16905090565b60008060008060418651141515610db2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7369676e6174757265206c656e677468206e6f74206d6174636800000000000081525060200191505060405180910390fd5b6020860151925060408601519150606086015160001a9050601b8160ff161015610ddd57601b810190505b601b8160ff1614158015610df55750601c8160ff1614155b15610e035760009350610e87565b600185828585604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610e7a573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050809050919050565b60008082518451141515610f58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f61646472206c656e677468206e6f742065712076616c7565206c656e6774680081525060200191505060405180910390fd5b600090505b83518161ffff161015610fc057610fb2610f756120e9565b858361ffff16815181101515610f8757fe5b90602001906020020151858461ffff16815181101515610fa357fe5b90602001906020020151612135565b508080600101915050610f5d565b600191505092915050565b60608060606000806060600087955060008651111515611079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f68657820737472696e6720746f206279746573206572726f722c20686578207381526020017f7472696e6720697320656d70747900000000000000000000000000000000000081525060400191505060405180910390fd5b85516040519080825280602002602001820160405280156110a95781602001602082028038833980820191505090505b509450600093505b85518410156111c95785848151811015156110c857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049250606083111561116957600a6061840301858581518110151561115657fe5b90602001906020020181815250506111bc565b604283111561119a57600a6041840301858581518110151561118757fe5b90602001906020020181815250506111bb565b6030830385858151811015156111ac57fe5b90602001906020020181815250505b5b83806001019450506110b1565b600285518115156111d657fe5b046040519080825280601f01601f1916602001820160405280156112095781602001602082028038833980820191505090505b509150600090505b84518110156112c857846001820181518110151561122b57fe5b906020019060200201516010868381518110151561124557fe5b9060200190602002015102017f0100000000000000000000000000000000000000000000000000000000000000028260028381151561128057fe5b0481518110151561128d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600281019050611211565b819650505050505050919050565b6000606082905060408151141515611356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f68657820537472696e67206c656e677468206d7573742069732036340000000081525060200191505060405180910390fd5b61136761136284610fcb565b611d6f565b915050919050565b6000808251845114151561138257600080fd5b600084511115156113fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f61646472657373206172726179206c656e67746820697320300000000000000081525060200191505060405180910390fd5b600090505b83518161ffff16101561145c5761144e33858361ffff1681518110151561142357fe5b90602001906020020151858461ffff1681518110151561143f57fe5b90602001906020020151612135565b508080600101915050611400565b600191505092915050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ff5780601f106114d4576101008083540402835291602001916114ff565b820191906000526020600020905b8154815290600101906020018083116114e257829003601f168201915b5050505050905090565b60008060007f0c25c0872997c78107328cf7256006d9759fdc985126cb9031ce8d08a8f8bfd9876115393361262d565b604051808381526020018281526020019250505060405180910390a161155e3361262d565b87111515156115fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f7374616e646172642063757272656e63792062616c616e6365206e6f7420656e81526020017f6f7567680000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156116a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f746f206164647265737320696c6c6567616c000000000000000000000000000081525060200191505060405180910390fd5b6116a985610cc9565b1515611743576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f756e737461626c652063757272656e637920636f6e747261637420616464726581526020017f737320646f6573206e6f7420657869737400000000000000000000000000000081525060400191505060405180910390fd5b849150836040518082805190602001908083835b60208310151561177c5780518252602082019150602081019050602083039250611757565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561181157600080fd5b505af1158015611825573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561184f57600080fd5b81019080805164010000000081111561186757600080fd5b8281019050602081018481111561187d57600080fd5b815185600182028301116401000000008211171561189a57600080fd5b50509291905050506040518082805190602001908083835b6020831015156118d757805182526020820191506020810190506020830392506118b2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561197d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f74686520746f6b656e2073796d626f6c206e6f7420657175616c73000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16638f31fcff6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119e157600080fd5b505af11580156119f5573d6000803e3d6000fd5b505050506040513d6020811015611a0b57600080fd5b81019080805190602001909291905050509050611a29338289612135565b92508215611b4b578173ffffffffffffffffffffffffffffffffffffffff1663fed6b65788886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050602060405180830381600087803b158015611aa857600080fd5b505af1158015611abc573d6000803e3d6000fd5b505050506040513d6020811015611ad257600080fd5b810190808051906020019092919050505092503373ffffffffffffffffffffffffffffffffffffffff167fdf492c2f66ac3a5203f58f763da5f40b32ff9a9efcca98cfb67987234a3b102884604051808215151515815260200191505060405180910390a2821515611b4a57611b49338289612676565b5b5b8292505050949350505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000803373ffffffffffffffffffffffffffffffffffffffff1614151515611c12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f6d73672e73656e6465722061646472657373206973203078300000000000000081525060200191505060405180910390fd5b611c1d848484612135565b90509392505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1614151515611cb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f66726f6d2061646472657373206973203078300000000000000000000000000081525060200191505060405180910390fd5b611cc1338484612135565b905092915050565b6000801515611d66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f7374616e646172642063757272656e63792074656d706f726172696c7920646f81526020017f206e6f7420737570706f7274206164646974696f6e616c2069737375616e636581525060400191505060405180910390fd5b60009050919050565b600060208251141515611dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f696e707574206279746573206c656e677468206d75737420697320333200000081525060200191505060405180910390fd5b60208201519050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060829050600081511415611e3d5760006001029150611e45565b602083015191505b50919050565b6060806000808651111515611ec8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f696e707574206279746573206c656e677468206973203000000000000000000081525060200191505060405180910390fd5b836040519080825280601f01601f191660200182016040528015611efb5781602001602082028038833980820191505090505b509150600090505b83811015611fb15785818601815181101515611f1b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028282815181101515611f7457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611f03565b81925050509392505050565b60008054905090565b600080611fde68706f6c6963795f696460010261277a565b90507ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e8160405180826000191660001916815260200191505060405180910390a17ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e60005460405180826000191660001916815260200191505060405180910390a16000546000191681600019161415156120e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f706f6c6963794964206661696c65642076616c69646174696f6e00000000000081525060200191505060405180910390fd5b600191505090565b600080612128694d53475f53454e44455260010260207f5354414353000000000000000000000000000000000000000000000000000001600102612872565b9050806001900491505090565b60008060008473ffffffffffffffffffffffffffffffffffffffff16141515156121c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f746f20616464726573732069732030783000000000000000000000000000000081525060200191505060405180910390fd5b600083111515612265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f7468652076616c7565206d75737420626520746861742069732067726561746581526020017f72207468616e207a65726f2e000000000000000000000000000000000000000081525060400191505060405180910390fd5b82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561231c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f62616c616e6365206e6f7420656e6f756768000000000000000000000000000081525060200191505060405180910390fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515612414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f746f20616464726573732062616c616e6365206f766572666c6f77000000000081525060200191505060405180910390fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905082600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a380600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540114151561262157fe5b60019150509392505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f219c4c04abd296da7f59b5630bb10f151e238e589be6c2429291ad288ec3fee0836040518082815260200191505060405180910390a3505050565b6000807ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e8360405180826000191660001916815260200191505060405180910390a16127eb8360207f53544143530000000000000000000000000000000000000000000000000000016001026128d8565b90506000602060ff16111515612869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f757470757420697320656d707479000000000000000000000000000000000081525060200191505060405180910390fd5b80915050919050565b600061287c612990565b6000612886612990565b8683600060018110151561289657fe5b6020020190600019169081600019168152505084915085816020856000866000f1508060006001811015156128c757fe5b602002015193505050509392505050565b60006128e2612990565b60006128ec612990565b868360006001811015156128fc57fe5b6020020190600019169081600019168152505084915085816020856000866000f1507ff263fdaa282129bf525bc5da5a454ee67eb2b96bc11afab9c6f92896f166b18e81600060018110151561294e57fe5b602002015160405180826000191660001916815260200191505060405180910390a180600060018110151561297f57fe5b602002015193505050509392505050565b6020604051908101604052806001906020820280388339808201915050905050905600a165627a7a72305820c675c3d137df622dfc21643ca8041679dcd95f57dd6598653c98427df8ba98a20029000000000000000000000000bc792842aeefe672f85ca676ae4569242a0fde1d00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000007535f343538343300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c535f34353834335f4e616d650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303037343738356636393634",
        "extension": "{\"a\":1}",
        "from": "bc792842aeefe672f85ca676ae4569242a0fde1d",
        "functionName": "CREATE_CONTRACT",
        "index": 0,
        "name": "StandardCurrency",
        "sourCode": "pragma solidity ^0.4.24;\n\n\n//This smart contact is generated for  #name#\ncontract Common {\n    bytes32 constant STACS_ADDR = bytes32(0x5354414353000000000000000000000000000000000000000000000000000001);\n    bytes32 constant  POLICY_ID = bytes32(0x0000000000000000000000000000000000000000000000706f6c6963795f6964);\n    bytes32 constant TX_ID = bytes32(0x00000000000000000000000000000000000000000000000000000074785f6964);\n    bytes32 constant MSG_SENDER = bytes32(0x000000000000000000000000000000000000000000004d53475f53454e444552);\n    event Bytes32(bytes32);\n    event UintLog(uint, uint);\n    event Bytes(bytes);\n    event Address(address);\n    event String(string);\n\n    bytes32 policyId;\n\n    function updatePolicyId(string newPolicyIdStr) public returns (bool success);\n\n    function getPolicyId() public view returns (bytes32){\n        return policyId;\n    }\n\n    function recovery(bytes sig, bytes32 hash) public pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        //Check the signature length\n        require(sig.length == 65, \"signature length not match\");\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // Version of signature should be 27 or 28\n        if (v < 27) {\n            v += 27;\n        }\n        //check version\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n        return ecrecover(hash, v, r, s);\n    }\n\n    function hexStr2bytes(string data) public pure returns (bytes){\n        bytes memory a = bytes(data);\n        require(a.length > 0, \"hex string to bytes error, hex string is empty\");\n        uint[] memory b = new uint[](a.length);\n\n        for (uint i = 0; i < a.length; i++) {\n            uint _a = uint(a[i]);\n\n            if (_a > 96) {\n                b[i] = _a - 97 + 10;\n            }\n            else if (_a > 66) {\n                b[i] = _a - 65 + 10;\n            }\n            else {\n                b[i] = _a - 48;\n            }\n        }\n\n        bytes memory c = new bytes(b.length / 2);\n        for (uint _i = 0; _i < b.length; _i += 2) {\n            c[_i / 2] = byte(b[_i] * 16 + b[_i + 1]);\n        }\n        return c;\n    }\n\n    function getContextIdByKey(bytes32 key) internal returns (bytes32 contextPolicyId){\n        emit Bytes32(key);\n        bytes32 output = getContextParam(key, 32, STACS_ADDR);\n        require(output.length > 0, \"output is empty\");\n        return output;\n    }\n\n    function getContextParam(bytes32 input, uint outputSize, bytes32 precompliedContractAddr) internal returns (bytes32){\n        bytes32[1] memory inputs;\n        inputs[0] = input;\n        bytes32 stacs_addr = precompliedContractAddr;\n        bytes32[1] memory output;\n        assembly{\n            let success := call(//This is the critical change (Pop the top stack value)\n            0, //5k gas\n            stacs_addr, //To addr\n            0, //No value\n            inputs,\n            32,\n            output,\n            outputSize)\n        }\n        emit Bytes32(output[0]);\n        return output[0];\n    }\n\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n\n    function splitBytes(bytes strBytes, uint start, uint length) public pure returns (bytes){\n        require(strBytes.length > 0, \"input bytes length is 0\");\n        bytes memory b = new bytes(length);\n        for (uint i = 0; i < length; i++) {\n            b[i] = strBytes[start + i];\n        }\n        return b;\n    }\n\n    function bytesToAddress(bytes bys) internal pure returns (address addr) {\n        require(bys.length == 20, \"bytes to address error. input bytes length is not 20\");\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    function bytesToBytes32(bytes bytes_32) public pure returns (bytes32 result){\n        require(bytes_32.length == 32, \"input bytes length must is 32\");\n        assembly {\n            result := mload(add(bytes_32, 32))\n        }\n    }\n\n    function hexStringToBytes32(string hexString) public pure returns (bytes32 result){\n        bytes memory hexStringBytes = bytes(hexString);\n        require(hexStringBytes.length == 64, \"hex String length must is 64\");\n        return bytesToBytes32(hexStr2bytes(hexString));\n    }\n\n    function verifyPolicyId() internal returns (bool){\n        bytes32 contextPolicyId = getContextIdByKey(POLICY_ID);\n        emit Bytes32(contextPolicyId);\n        emit Bytes32(policyId);\n        require(contextPolicyId == policyId, \"policyId failed validation\");\n        return true;\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) public view returns (bool is_contract) {\n        uint length;\n        assembly {\n        //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    function getContextParam2(bytes32 input, uint outputSize, bytes32 precompliedContractAddr) internal returns (bytes32){\n        bytes32[1] memory inputs;\n        inputs[0] = input;\n        bytes32 stacs_addr = precompliedContractAddr;\n        bytes32[1] memory output;\n        assembly{\n            let success := call(\n            0,\n            stacs_addr,\n            0,\n            inputs,\n            32,\n            output,\n            outputSize)\n        }\n        return output[0];\n    }\n\n    //get context sender\n    function getContextSender() internal returns (address){\n        //通过使用增强的预编译合约验证，originalAddress是否是最原始交易的sender\n        bytes32 output = getContextParam2(MSG_SENDER, 32, STACS_ADDR);\n        return address(output);\n    }\n}\n\n\n//This smart contact is generated for  #name#\ncontract StandardToken is Common {\n    address issuerAddress;\n    address ownerAddress;\n    string tokenName;\n    string tokenSymbol;\n    uint totalSupplyAmount;\n    uint8 decimalsDigit;\n\n\n    function issuerAddr() public view returns (address){\n        return issuerAddress;\n    }\n\n    function ownerAddr() public view returns (address){\n        return ownerAddress;\n    }\n\n    function name() public view returns (string){\n        return tokenName;\n    }\n\n    function symbol() public view returns (string){\n        return tokenSymbol;\n    }\n\n    function decimals() public view returns (uint8){\n        return decimalsDigit;\n    }\n\n    function totalSupply() public view returns (uint256){\n        return totalSupplyAmount;\n    }\n\n\n\n    function transfer(address _to, uint256 _value) public payable returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) internal returns (bool);\n\n    function recoverToken(address _from, address _to, uint256 _value) public payable returns (bool success);\n\n    function additionalIssue(uint num) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function updatePolicyId(string newPolicyIdStr) public returns (bool success){\n        require(verifyPolicyId());\n        //update policyId\n        bytes32 newPolicyId = hexStringToBytes32(newPolicyIdStr);\n        policyId = newPolicyId;\n        return true;\n    }\n\n    function settlPay(address[] _addrs, uint256[] _values) public returns (bool success){\n        require(_addrs.length == _values.length);\n        require(_addrs.length > 0, \"address array length is 0\");\n\n        for (uint16 i = 0; i < _addrs.length; i++) {\n            transferFrom(msg.sender, _addrs[i], _values[i]);\n        }\n        return true;\n    }\n\n    function buybackPay( address[] _addrs, uint256[] _payValues)public returns (bool success){\n        require(_addrs.length == _payValues.length,\"addr length not eq value length\");\n\n        for (uint16 i = 0; i < _addrs.length; i++) {\n            transferFrom(getContextSender(), _addrs[i], _payValues[i]);\n        }\n        return true;\n    }\n}\n\n\n//This smart contact is generated for  #name#\ninterface TokenReceiver {\n    /// @param _payment stable token payment of subscribe token\n    /// @param _amount The amount of token to be transferred\n    /// @return success whether the contract method invoke is successful\n    function receiveToken(uint256 _payment, uint256 _amount) external returns (bool success);\n\n    ///@return offerAddress the address of contract offer\n    function tokenOwnerAddress() external view returns (address offerAddress);\n\n    function symbol() external view returns (string);\n}\n\n\n//This smart contact is generated for  #name#\ncontract StandardCurrency is StandardToken {\n\n    constructor (\n        address _ownerAddr,\n        string _tokenName,\n        string _tokenSymbol,\n        uint _totalSupply,\n        uint8 _decimals,\n        string _policyId\n    ) public {\n        ownerAddress = _ownerAddr;\n        issuerAddress = msg.sender;\n        tokenName = _tokenName;\n        tokenSymbol = _tokenSymbol;\n        decimalsDigit = _decimals;\n        totalSupplyAmount = _totalSupply;\n        balance[ownerAddress] = totalSupplyAmount;\n        policyId = hexStringToBytes32(_policyId);\n        emit Bytes32(policyId);\n    }\n\n    mapping(address => uint) balance;\n\n    function balanceOf(address _owner) public view returns (uint balanceAmount){\n        balanceAmount = balance[_owner];\n        return (balanceAmount);\n    }\n\n    function getBalance(address _owner) internal view returns (uint){\n        return balance[_owner];\n    }\n\n    function additionalIssue(uint num) public returns (bool){\n        require(false, \"standard currency temporarily do not support additional issuance\");\n        //        require(verifyPolicyId());\n        //        bytes32 txId = getContextIdByKey(TX_ID);\n        //        bytes32 sourceHash = getAdditionalIssueSourceHashInner(txId, msg.sender, num);\n        //        require(verifySpecifiedAddressSig(issuerAddress,sourceHash, signature));\n        //        totalSupplyAmount += num;\n        //        balance[ownerAddress] += num;\n        return false;\n    }\n\n    function transfer(address _to, uint256 _value) public payable returns (bool success){\n        require(msg.sender != 0x0, \"from address is 0x0\");\n        return transferFrom(msg.sender, _to, _value);\n    }\n\n    function recoverToken(address _from, address _to, uint256 _value) public payable returns (bool success){\n        require(msg.sender != 0x0, \"msg.sender address is 0x0\");\n        return transferFrom(_from, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) internal returns (bool){\n        require(_to != 0x0, \"to address is 0x0\");\n        require(_value > 0, \"the value must be that is greater than zero.\");\n        require(balance[_from]  >= _value, \"balance not enough\");\n        require(balance[_to] + _value >= balance[_to], \"to address balance overflow\");\n        uint previousBalance = balance[_from] + balance[_to];\n        balance[_from] -= _value;\n        balance[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balance[_from] + balance[_to] == previousBalance);\n\n        return true;\n    }\n\n    /// @param _to The address of the contract\n    /// @param token use verify sign\n    /// @param _payment cost of stable token to subscribe\n    /// @param _amount The amount of token to be transferred/// @param _amount The amount of token to be transferred\n    /// @return Whether the subscribe is successful or not\n    function transferToContract(uint256 _payment, uint256 _amount,address _to, string token ) public returns (bool success) {\n        emit UintLog(_payment,getBalance(msg.sender));\n        require(_payment <= getBalance(msg.sender), \"standard currency balance not enough\");\n        require(_to != address(0), \"to address illegal\");\n        require(isContract(_to), \"unstable currency contract address does not exist\");\n\n        TokenReceiver tokenReceiver = TokenReceiver(_to);\n        require(keccak256(tokenReceiver.symbol()) == keccak256(token), \"the token symbol not equals\");\n\n        address contractOfferAddress = tokenReceiver.tokenOwnerAddress();\n        success = transferFrom(msg.sender, contractOfferAddress, _payment);\n        if (success) {\n            success = tokenReceiver.receiveToken(_payment, _amount);\n            emit RechangeSuccess(msg.sender, success);\n            if (!success) {\n                rollbackTransfer(msg.sender, contractOfferAddress, _payment);\n            }\n        }\n        return success;\n    }\n\n    // rollback of transfer when failure\n    function rollbackTransfer(address _from, address _to, uint _value) private {\n        balance[_to] -= _value;\n        balance[_from] += _value;\n        emit RollbackTransfer(_to, _from, _value);\n    }\n\n\n    event RechangeSuccess(address indexed _to, bool success);\n    event RollbackTransfer(address indexed _from, address indexed _to, uint256 _value);\n}",
        "symbol": "S_45843",
        "to": "dfd0e74ec823537b412ffe560ed29617706513d3",
        "type": "CONTRACT_CREATION",
        "version": "1.0.0"
      }
    ]    
  }
}

export default {
  txList,
  txListAn,
  blockList,
  blockListDetails,
  contractList,
  balance,
  txDetails
};
  